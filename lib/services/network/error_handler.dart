import 'package:dio/dio.dart';import 'package:flutter/foundation.dart';import 'package:talker/talker.dart';/// Handling  all errorsclass ErrorHandler implements Exception {  String _errorMessage = "";  int _statusCode = 100;  ErrorHandler(this._errorMessage, this._statusCode);  ErrorHandler.dioException({required DioException error}) {    _handleDioException(error);  }  ErrorHandler.otherException() {    _handleOtherException();  }  //error getter  getErrorMessage() {    return _errorMessage;  }  getStatusCode() {    return _statusCode;  }  _handleOtherException() {    _errorMessage = "Something went Wrong";    _statusCode = -1;    ErrorHandler serverError = ErrorHandler(_errorMessage, _statusCode);    return serverError;  }  //error will be network related  _handleDioException(DioException error) {    ErrorHandler serverError;    switch (error.type) {      case DioExceptionType.cancel:        _errorMessage = "Request Canceled";        _statusCode = error.response?.statusCode ?? -1;        serverError = ErrorHandler(_errorMessage, _statusCode);        break;      case DioExceptionType.connectionTimeout:        _errorMessage = "Connection time out";        _statusCode = error.response?.statusCode ?? -1;        serverError = ErrorHandler(_errorMessage, _statusCode);        break;      case DioExceptionType.receiveTimeout:        _errorMessage = "Received timeout";        _statusCode = error.response?.statusCode ?? -1;        serverError = ErrorHandler(_errorMessage, _statusCode);        break;      case DioExceptionType.badResponse:        if (error.response?.statusCode == 503) {          _errorMessage = "Something went wrong";          _statusCode = error.response?.statusCode ?? -1;          serverError = ErrorHandler(_errorMessage, _statusCode);        } else if (error.response?.statusCode != 401) {          _errorMessage = handleBadRequest(error.response?.data);          _statusCode = error.response?.statusCode ?? -1;          serverError = ErrorHandler(_errorMessage, _statusCode);        } else {          _errorMessage = "UnAuthorized";          _statusCode = error.response?.statusCode ?? -1;          serverError = ErrorHandler(_errorMessage, _statusCode);        }        break;      case DioExceptionType.unknown:        Talker().log(          "Called here unknown",          logLevel: LogLevel.error,        );        _errorMessage = "Something went wrong";        _statusCode = error.response?.statusCode ?? -1;        serverError = ErrorHandler(_errorMessage, _statusCode);        break;      case DioExceptionType.sendTimeout:        if (kReleaseMode) {          _errorMessage = "Something went wrong";          _statusCode = error.response?.statusCode ?? -1;        } else {          _errorMessage = "Received timeout";          _statusCode = error.response?.statusCode ?? -1;        }        serverError = ErrorHandler(_errorMessage, _statusCode);        break;      case DioExceptionType.connectionError:        _errorMessage = "No Internet connection";        _statusCode = error.response?.statusCode ?? -1;        serverError = ErrorHandler(_errorMessage, _statusCode);        break;      default:        _errorMessage = error.response?.statusMessage ?? "Something went wrong";        _statusCode = error.response?.statusCode ?? -1;        serverError = ErrorHandler(_errorMessage, _statusCode);        break;    }    return serverError;  }  // this is a sample error structure it might change on your case  // so you have to add your own error structure  in order to catch the errors  String handleBadRequest(Map<String, dynamic>? errorData) {    String error = "";    if (errorData?['error_description'] != null) {      final message = errorData?['error_description'];      error = message;    } else if (errorData?['error'] != null) {      try {        final errorObject = errorData?['error'];        final message = errorObject['message'];        final dynamic errorTag = message.keys.first; // Extract the first key dynamically        error = message[errorTag];      } catch (e) {        error = errorData?['error']['message'] ?? "";      }    } else if (errorData?['errors'] == null && errorData?.entries != null) {      for (var item in errorData!.entries) {        error = item.value.toString();        break;      }    } else {      error = "Something went wrong";    }    return error;  }}