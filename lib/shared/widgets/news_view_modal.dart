import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'package:news_app/models/news/news.dart';import 'package:news_app/shared/size_config/extensions.dart';class ModalWithGesture extends StatefulWidget {  final News news;  const ModalWithGesture({    super.key,    required this.news,  });  @override  ModalWithGestureState createState() => ModalWithGestureState();}class ModalWithGestureState extends State<ModalWithGesture> {  double _clipRadius = 0.0;  Offset? _offset;  double scale = 1;  final ValueNotifier<double> radiusNotifier = ValueNotifier(0);  @override  void initState() {    super.initState();    radiusNotifier.addListener(() {      if (radiusNotifier.value <= 100 && radiusNotifier.value > 0) {        if (ModalRoute.of(context)!.isCurrent) {          Navigator.pop(context);        }      }    });  }  @override  Widget build(BuildContext context) {    return GestureDetector(      onVerticalDragUpdate: (details) {        setState(() {          _offset = Offset(details.localPosition.dx, details.localPosition.dy);          _clipRadius = MediaQuery.of(context).size.height - details.localPosition.dy;          radiusNotifier.value = _clipRadius;          if (_clipRadius <= MediaQuery.of(context).size.height * 0.4) {            if (details.delta.dy > 0) {              scale = scale + 0.01;            }            if (details.delta.dy < 0) {              scale = scale - 0.01;            }          }        });      },      onVerticalDragEnd: (details) {        setState(() {          if (radiusNotifier.value <= 100 && radiusNotifier.value > 0) {          } else {            _clipRadius = 0.0;            scale = 1;            _offset = null;            radiusNotifier.value = _clipRadius;          }        });      },      child: Stack(        children: [          if (!(radiusNotifier.value <= 100 && radiusNotifier.value > 0))            Container(              height: MediaQuery.of(context).size.height,              width: MediaQuery.of(context).size.width,              color: Colors.black.withOpacity(_clipRadius / MediaQuery.of(context).size.height),            ),          if (_clipRadius > 0 || _offset != null)            ClipOval(              clipper: ModalClipper(_clipRadius, _offset!),              clipBehavior: Clip.hardEdge,              child: AnimatedContainer(                transform: Matrix4.identity()..scale(scale, scale),                duration: const Duration(milliseconds: 300),                curve: Curves.ease,                child: NewsDetails(                  news: widget.news,                ),              ),            ),          if (!(_clipRadius > 0 || _offset != null))            NewsDetails(              news: widget.news,            ),        ],      ),    );  }}class NewsDetails extends StatefulWidget {  final News news;  const NewsDetails({    super.key,    required this.news,  });  @override  State<NewsDetails> createState() => _NewsDetailsState();}class _NewsDetailsState extends State<NewsDetails> {  @override  Widget build(BuildContext context) {    return Scaffold(      body: Stack(        children: [          CachedNetworkImage(            height: MediaQuery.of(context).size.height / 1.5,            width: MediaQuery.of(context).size.width,            imageUrl: widget.news.urlToImage ?? "",            imageBuilder: (context, imageProvider) => Container(              decoration: BoxDecoration(                borderRadius: BorderRadius.circular(8.relWidth),                image: DecorationImage(                  image: imageProvider,                  fit: BoxFit.cover,                ),              ),            ),            placeholder: (context, url) => const CircularProgressIndicator(),            errorWidget: (context, url, error) => const Icon(Icons.error),          ),          DraggableScrollableSheet(            initialChildSize: 0.5,            minChildSize: 0.5,            maxChildSize: 1,            shouldCloseOnMinExtent: false,            controller: DraggableScrollableController(),            builder: (BuildContext context, scrollController) => SingleChildScrollView(              controller: scrollController,              child: Container(                padding: EdgeInsets.all(16.relHeight),                decoration: BoxDecoration(                  color: Colors.white,                  borderRadius: BorderRadius.only(                    topLeft: Radius.circular(36.relWidth),                    topRight: Radius.circular(36.relWidth),                  ),                ),                child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    Row(                      mainAxisAlignment: MainAxisAlignment.spaceAround,                      children: [                        Container(                          padding:                              EdgeInsets.symmetric(vertical: 4.relHeight, horizontal: 12.relWidth),                          decoration: BoxDecoration(                            color: Colors.black,                            borderRadius: BorderRadius.circular(24.relWidth),                          ),                          child: Row(                            mainAxisSize: MainAxisSize.min,                            children: [                              Container(                                padding: EdgeInsets.all(4.relWidth),                                decoration: BoxDecoration(                                  color: Colors.grey.shade200,                                  shape: BoxShape.circle,                                ),                                child: Icon(                                  Icons.person_rounded,                                  size: 20.relWidth,                                ),                              ),                              8.hSpacer,                              Text(                                "${widget.news.source?.name}",                                style: TextStyle(                                  color: Colors.white,                                  fontSize: 12.text,                                ),                              ),                            ],                          ),                        ),                        Container(                          padding:                              EdgeInsets.symmetric(vertical: 4.relHeight, horizontal: 12.relWidth),                          decoration: BoxDecoration(                            color: Colors.black,                            borderRadius: BorderRadius.circular(24.relWidth),                          ),                          child: Row(                            mainAxisSize: MainAxisSize.min,                            children: [                              Container(                                padding: EdgeInsets.all(4.relWidth),                                decoration: BoxDecoration(                                  color: Colors.grey.shade200,                                  shape: BoxShape.circle,                                ),                                child: Icon(                                  Icons.timer,                                  size: 20.relWidth,                                ),                              ),                              8.hSpacer,                              Text(                                DateFormat.MMMMEEEEd().format(widget.news.publishedAt!),                                style: TextStyle(                                  color: Colors.white,                                  fontSize: 12.text,                                ),                              ),                            ],                          ),                        ),                      ],                    ),                    48.vSpacer,                    Text(                      "${widget.news.title}",                      textAlign: TextAlign.center,                      style: TextStyle(                        color: Colors.black,                        fontSize: 16.text,                        height: 24.relHeight / 16.text,                        fontWeight: FontWeight.w600,                      ),                    ),                    24.vSpacer,                    Text(                      "${widget.news.content} ${widget.news.content} ${widget.news.content}",                      style: TextStyle(                        color: Colors.black54,                        fontSize: 14.text,                        fontWeight: FontWeight.w400,                        height: 24.relHeight / 14.text,                      ),                    ),                  ],                ),              ),            ),          )        ],      ),    );  }}class ModalClipper extends CustomClipper<Rect> {  final double radius;  final Offset offset;  ModalClipper(this.radius, this.offset);  @override  Rect getClip(Size size) {    return Rect.fromCircle(      center: offset,      radius: radius,    );  }  @override  bool shouldReclip(covariant CustomClipper<Rect> oldClipper) {    return true;  }}