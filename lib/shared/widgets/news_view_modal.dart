import 'package:flutter/material.dart';import 'package:news_app/models/news/news.dart';import 'package:news_app/shared/widgets/news_details.dart';class ModalWithGesture extends StatefulWidget {  final News news;  const ModalWithGesture({    super.key,    required this.news,  });  @override  ModalWithGestureState createState() => ModalWithGestureState();}class ModalWithGestureState extends State<ModalWithGesture> {  double _clipRadius = 0.0;  Offset? _offset;  double scale = 1;  final ValueNotifier<double> radiusNotifier = ValueNotifier(0);  @override  void initState() {    super.initState();    radiusNotifier.addListener(() {      if (radiusNotifier.value <= 100 && radiusNotifier.value > 0) {        if (ModalRoute.of(context)!.isCurrent) {          Navigator.pop(context);        }      }    });  }  @override  Widget build(BuildContext context) {    return GestureDetector(      onVerticalDragUpdate: (details) {        setState(() {          _offset = Offset(details.localPosition.dx, details.localPosition.dy);          _clipRadius = MediaQuery.of(context).size.height - details.localPosition.dy;          radiusNotifier.value = _clipRadius;          if (_clipRadius <= MediaQuery.of(context).size.height * 0.4) {            if (details.delta.dy > 0) {              scale = scale + 0.01;            }            if (details.delta.dy < 0) {              scale = scale - 0.01;            }          }        });      },      onVerticalDragEnd: (details) {        setState(() {          if (radiusNotifier.value <= 100 && radiusNotifier.value > 0) {          } else {            _clipRadius = 0.0;            scale = 1;            _offset = null;            radiusNotifier.value = _clipRadius;          }        });      },      child: Stack(        children: [          if (!(radiusNotifier.value <= 100 && radiusNotifier.value > 0))            Container(              height: MediaQuery.of(context).size.height,              width: MediaQuery.of(context).size.width,              color: Colors.black.withOpacity(_clipRadius / MediaQuery.of(context).size.height),            ),          if (_clipRadius > 0 || _offset != null)            ClipOval(              clipper: ModalClipper(_clipRadius, _offset!),              clipBehavior: Clip.hardEdge,              child: AnimatedContainer(                transform: Matrix4.identity()..scale(scale, scale),                duration: const Duration(milliseconds: 300),                curve: Curves.ease,                child: NewsDetails(                  news: widget.news,                ),              ),            ),          if (!(_clipRadius > 0 || _offset != null))            NewsDetails(              news: widget.news,            ),        ],      ),    );  }}class ModalClipper extends CustomClipper<Rect> {  final double radius;  final Offset offset;  ModalClipper(this.radius, this.offset);  @override  Rect getClip(Size size) {    return Rect.fromCircle(      center: offset,      radius: radius,    );  }  @override  bool shouldReclip(covariant CustomClipper<Rect> oldClipper) {    return true;  }}