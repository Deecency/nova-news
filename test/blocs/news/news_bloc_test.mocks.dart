// Mocks generated by Mockito 5.4.4 from annotations
// in news_app/test/blocs/news/news_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/widgets/notification_listener.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:news_app/models/news/news.dart' as _i7;
import 'package:news_app/repositories/local_repository.dart' as _i8;
import 'package:news_app/repositories/news_repository.dart' as _i5;
import 'package:news_app/services/network/api_result.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResult_0<T> extends _i1.SmartFake implements _i2.ApiResult<T> {
  _FakeApiResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_2 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i5.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.ApiResult<List<_i7.News>>> get news => (super.noSuchMethod(
        Invocation.getter(#news),
        returnValue: _i6.Future<_i2.ApiResult<List<_i7.News>>>.value(
            _FakeApiResult_0<List<_i7.News>>(
          this,
          Invocation.getter(#news),
        )),
      ) as _i6.Future<_i2.ApiResult<List<_i7.News>>>);

  @override
  _i6.Future<_i2.ApiResult<List<_i7.News>>> get trendingNews =>
      (super.noSuchMethod(
        Invocation.getter(#trendingNews),
        returnValue: _i6.Future<_i2.ApiResult<List<_i7.News>>>.value(
            _FakeApiResult_0<List<_i7.News>>(
          this,
          Invocation.getter(#trendingNews),
        )),
      ) as _i6.Future<_i2.ApiResult<List<_i7.News>>>);

  @override
  _i6.Future<_i2.ApiResult<List<_i7.News>>> newsByCategory(
          {required String? category}) =>
      (super.noSuchMethod(
        Invocation.method(
          #newsByCategory,
          [],
          {#category: category},
        ),
        returnValue: _i6.Future<_i2.ApiResult<List<_i7.News>>>.value(
            _FakeApiResult_0<List<_i7.News>>(
          this,
          Invocation.method(
            #newsByCategory,
            [],
            {#category: category},
          ),
        )),
      ) as _i6.Future<_i2.ApiResult<List<_i7.News>>>);
}

/// A class which mocks [LocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalRepository extends _i1.Mock implements _i8.LocalRepository {
  MockLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setData({
    required String? key,
    dynamic data,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setData,
          [],
          {
            #key: key,
            #data: data,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<Object?> getData({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #getData,
          [],
          {#key: key},
        ),
        returnValue: _i6.Future<Object?>.value(),
      ) as _i6.Future<Object?>);

  @override
  void removeData({required String? key}) => super.noSuchMethod(
        Invocation.method(
          #removeData,
          [],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAll() => super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBoolData({
    required String? key,
    required bool? data,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setBoolData,
          [],
          {
            #key: key,
            #data: data,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool?> getBoolData({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #getBoolData,
          [],
          {#key: key},
        ),
        returnValue: _i6.Future<bool?>.value(),
      ) as _i6.Future<bool?>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_1(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i3.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_2(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i9.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}
